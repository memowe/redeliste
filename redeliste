#!/usr/bin/env perl
use Mojolicious::Lite -signatures;

# In-memory "database"
helper data => sub { state $data = {} };

# Token generator helper
helper generate_token => sub ($self) {

    # Generate token with 6 characters
    my @chars = ('A'..'Z', 1 .. 9);
    my $token = join '' => map $chars[rand @chars] => 1 .. 6;

    # Done, if doesn't exist
    return $token unless exists $self->data->{$token};
    return $self->generate_token;
};

# First steps: static forms only
get '/' => 'choose';
get '/start';
get '/join';

# Create a session and generate a token for session members
post '/start' => sub ($c) {

    # Prepare data
    my $name    = $c->param('name')  //  'Anonymous session';
    my $uname   = $c->param('uname') // ('Anonymous' . int(rand 10_000));
    my $star    = $c->param('sex') eq 'male' ? '' : 1;

    # Initiate
    my $token = $c->generate_token;
    $c->data->{$token} = {
        name        => $name,
        persons     => [{id => 0, name => $uname, spoken => '', star => $star}],
        speaker_ids => [],
        token       => $token,
    };

    # Store and work with it
    $c->session({token => $token, user_id => 0, role => 'chair'});
    $c->redirect_to('dump'); # TODO
};

# Join a session
post '/join' => sub ($c) {

    # Prepare data
    my $name = $c->param('name') // ('Anonymous' . int(rand 10_000));
    my $star = $c->param('sex') eq 'male' ? '' : 1;

    # Lookup session
    my $token   = $c->param('token');
    my $session = $c->data->{$token};
    return $c->reply->not_found unless defined $session;

    # Inject data
    my $persons = $session->{persons};
    my $plen    = scalar @$persons;
    my $person  = {id => $plen, name => $name, spoken => '', star => $star};
    push @$persons, $person;

    # Store and work with it
    $c->session({token => $token, user_id => $person->{id}, role => 'user'});
    $c->redirect_to('dump'); # TODO
};

# TODO debug only
get '/dump' => sub ($c) {
    $c->render(format => 'txt', text => $c->dumper([$c->data, $c->session]));
};

app->start;
