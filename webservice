#!/usr/bin/env perl
use Mojolicious::Lite -signatures;
use Mojo::JSON qw(true false);

use lib app->home->rel_file('lib')->to_string;
use Redeliste::Model;

# Load configuration
plugin Config => {
    file => $ENV{REDELISTE_CONFIG} // app->home->rel_file('redeliste.conf'),
};
app->secrets([app->config('secret')]);
app->mode(app->config('production') ? 'production' : 'development');

# In-memory "database"
helper model => sub { state $model = Redeliste::Model->new };

# All relevant data for a given session as a hash
helper session_data_dump => sub ($c, $session) {{
    session         => $session->to_hash,
    nextSpeakers    => $session->get_next_speaker_ids,
    listOpen        => $session->list_open ? true : false,
    wsURL           => $c->url_for('sync')->to_abs->to_string,
}};

### REST API routes

post '/session' => sub ($c) {

    # Init
    my $session = $c->model->add_session(name => $c->param('name'));
    my $chair   = $session->add_person(
        name => $c->param('pname') // ('Anonymous' . int(rand 10_000)),
        star => $c->param('sex') ne 'male',
    );

    # Respond with 201 (created)
    $c->render(status => 201, json => {
        token       => $session->token,
        adminToken  => $session->admin_token,
    });
};

post '/session/:token/person' => sub ($c) {

    # Lookup session
    my $session = $c->model->sessions->{$c->param('token')};
    return $c->reply->not_found unless $session;

    # Inject data
    my $person = $session->add_person(
        name => $c->param('name') // ('Anonymous' . int(rand 10_000)),
        star => $c->param('sex') ne 'male',
    );

    # Respond with 201 (person created)
    $c->render(status => 201, json => {
        personId => $person->id,
    });
};

get '/session/:token' => sub ($c) {

    # Lookup session
    my $session = $c->model->sessions->{$c->param('token')};
    return $c->reply->not_found unless $session;

    # Respond with JSON data structure
    $c->render(json => $c->session_data_dump($session));
};

app->start;
