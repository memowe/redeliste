#!/usr/bin/env perl
use Mojolicious::Lite -signatures;
use Mojo::JSON qw(true false);

use lib app->home->rel_file('lib')->to_string;
use Redeliste::Model;

# Load configuration
plugin Config => {
    file => $ENV{REDELISTE_CONFIG} // app->home->rel_file('redeliste.conf'),
};
app->secrets([app->config('secret')]);
app->mode(app->config('production') ? 'production' : 'development');

# In-memory "database"
helper model => sub { state $model = Redeliste::Model->new };

# All relevant data for a given session as a hash
helper session_data_dump => sub ($c, $session) {{
    session         => $session->to_hash,
    nextSpeakers    => $session->get_next_speaker_ids,
    listOpen        => $session->list_open ? true : false,
    wsURL           => $c->url_for('sync')->to_abs->to_string,
}};

# Websocket communication helpers
helper broadcast => sub ($c, $session) {
    $session->persons->map('tx')->grep(sub {defined})
        ->each(sub {$_->send({json => $c->session_data_dump($session)})});
};
helper broadclose => sub ($c, $session) {
    $session->persons->map('tx')->grep(sub {defined})->each('finish');
};

### Render frontend from root route

get '/' => sub ($c) {
    $c->reply->static('index.html');
} => 'choose';

### REST API routes

post '/session' => sub ($c) {

    # Init
    my $session = $c->model->add_session(name => $c->param('name'));
    my $chair   = $session->add_person(
        name => $c->param('pname') // ('Anonymous' . int(rand 10_000)),
        star => $c->param('sex') ne 'male',
    );

    # Respond with 201 (created)
    $c->render(status => 201, json => {
        token       => $session->token,
        adminToken  => $session->admin_token,
        personId    => $chair->id,
    });
};

post '/session/:token/person' => sub ($c) {

    # Lookup session
    my $session = $c->model->sessions->{$c->param('token')};
    return $c->reply->not_found unless $session;

    # Inject data
    my $person = $session->add_person(
        name => $c->param('name') // ('Anonymous' . int(rand 10_000)),
        star => $c->param('sex') ne 'male',
    );

    # Respond with 201 (person created)
    $c->render(status => 201, json => {
        personId => $person->id,
    });
};

get '/session/:token' => sub ($c) {

    # Lookup session
    my $session = $c->model->sessions->{$c->param('token')};
    return $c->reply->not_found unless $session;

    # Respond with JSON data structure
    $c->render(json => $c->session_data_dump($session));
};

### WebSocket synchronisation

websocket '/session/:token/sync' => sub ($c) {

    # Keep connection alive
    $c->inactivity_timeout($c->config('timeout'));

    # Lookup corresponding data
    my $session = $c->model->sessions->{$c->param('token')};
    return $c->reply_not_found unless $session;
    my $person = $session->persons->[$c->param('personId')];
    return $c->reply_not_found unless $person;

    # Check if chair
    my $is_chair = defined $c->param('adminToken')
        && $session->admin_token eq $c->param('adminToken');

    # Store connection
    $person->tx($c->tx)->active(1);

    # React on a message
    $c->on(message => sub ($c, $message) {

        # Close the whole session
        if ($message eq 'CLOSESESSION') {
            delete $c->model->sessions->{$session->{token}};
            $c->broadclose($session);
            return;
        }

        # Dispatch messages
        for ($message) {

            # Person messages
            /^RQSP$/ && $session->add_request($person);
            /^REVK$/ && $session->revoke($person);

            # Chair messages
            if ($is_chair) {
                /^NEXT$/        && $session->call_next_speaker;
                /^NEXT (\d+)$/  && $session->call_next_speaker($1);
                /^CLOSELIST$/   && $session->list_open('');
                /^OPENLIST$/    && $session->list_open(1);
                /^NEXTITEM$/    && $session->next_item;
            }

            # Update all persons
            $c->broadcast($session);
        }
    });

    # React on a client leaving
    $c->on(finish => sub {

        # Chair: close everything
        if ($is_chair) {
            delete $c->model->sessions->{$session->token};
            $c->broadclose($session);
        }

        # Normal person: just let them know
        else {
            $person->tx(undef)->active(0);
            $c->broadcast($session);
        }
    });

    # Send updated session data to all clients
    $c->broadcast($session);

} => 'sync';

app->start;

__DATA__

@@ not_found.html.ep
% use Mojo::Util 'decode';
%== decode 'UTF-8' => app->static->file('404.html')->slurp
